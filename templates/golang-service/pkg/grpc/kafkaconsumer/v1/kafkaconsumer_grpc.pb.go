// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package kafkaconsumer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KafkaConsumerServiceClient is the client API for KafkaConsumerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KafkaConsumerServiceClient interface {
	SubscribeTopic(ctx context.Context, in *SubscribeTopicRequest, opts ...grpc.CallOption) (KafkaConsumerService_SubscribeTopicClient, error)
}

type kafkaConsumerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKafkaConsumerServiceClient(cc grpc.ClientConnInterface) KafkaConsumerServiceClient {
	return &kafkaConsumerServiceClient{cc}
}

func (c *kafkaConsumerServiceClient) SubscribeTopic(ctx context.Context, in *SubscribeTopicRequest, opts ...grpc.CallOption) (KafkaConsumerService_SubscribeTopicClient, error) {
	stream, err := c.cc.NewStream(ctx, &KafkaConsumerService_ServiceDesc.Streams[0], "/kafkaconsumer.v1.KafkaConsumerService/SubscribeTopic", opts...)
	if err != nil {
		return nil, err
	}
	x := &kafkaConsumerServiceSubscribeTopicClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KafkaConsumerService_SubscribeTopicClient interface {
	Recv() (*SubscribeTopicResponse, error)
	grpc.ClientStream
}

type kafkaConsumerServiceSubscribeTopicClient struct {
	grpc.ClientStream
}

func (x *kafkaConsumerServiceSubscribeTopicClient) Recv() (*SubscribeTopicResponse, error) {
	m := new(SubscribeTopicResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KafkaConsumerServiceServer is the server API for KafkaConsumerService service.
// All implementations must embed UnimplementedKafkaConsumerServiceServer
// for forward compatibility
type KafkaConsumerServiceServer interface {
	SubscribeTopic(*SubscribeTopicRequest, KafkaConsumerService_SubscribeTopicServer) error
	mustEmbedUnimplementedKafkaConsumerServiceServer()
}

// UnimplementedKafkaConsumerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKafkaConsumerServiceServer struct {
}

func (UnimplementedKafkaConsumerServiceServer) SubscribeTopic(*SubscribeTopicRequest, KafkaConsumerService_SubscribeTopicServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTopic not implemented")
}
func (UnimplementedKafkaConsumerServiceServer) mustEmbedUnimplementedKafkaConsumerServiceServer() {}

// UnsafeKafkaConsumerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KafkaConsumerServiceServer will
// result in compilation errors.
type UnsafeKafkaConsumerServiceServer interface {
	mustEmbedUnimplementedKafkaConsumerServiceServer()
}

func RegisterKafkaConsumerServiceServer(s grpc.ServiceRegistrar, srv KafkaConsumerServiceServer) {
	s.RegisterService(&KafkaConsumerService_ServiceDesc, srv)
}

func _KafkaConsumerService_SubscribeTopic_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeTopicRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KafkaConsumerServiceServer).SubscribeTopic(m, &kafkaConsumerServiceSubscribeTopicServer{stream})
}

type KafkaConsumerService_SubscribeTopicServer interface {
	Send(*SubscribeTopicResponse) error
	grpc.ServerStream
}

type kafkaConsumerServiceSubscribeTopicServer struct {
	grpc.ServerStream
}

func (x *kafkaConsumerServiceSubscribeTopicServer) Send(m *SubscribeTopicResponse) error {
	return x.ServerStream.SendMsg(m)
}

// KafkaConsumerService_ServiceDesc is the grpc.ServiceDesc for KafkaConsumerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KafkaConsumerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kafkaconsumer.v1.KafkaConsumerService",
	HandlerType: (*KafkaConsumerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeTopic",
			Handler:       _KafkaConsumerService_SubscribeTopic_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kafkaconsumer/v1/kafkaconsumer.proto",
}
