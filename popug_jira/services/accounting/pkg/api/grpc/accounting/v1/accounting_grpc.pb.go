// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package accountingv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountingServiceClient is the client API for AccountingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountingServiceClient interface {
	ShowCurrentBalance(ctx context.Context, in *ShowCurrentBalanceRequest, opts ...grpc.CallOption) (*ShowCurrentBalanceResponse, error)
	ShowTransactionLog(ctx context.Context, in *ShowTransactionLogRequest, opts ...grpc.CallOption) (*ShowTransactionLogResponse, error)
}

type accountingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountingServiceClient(cc grpc.ClientConnInterface) AccountingServiceClient {
	return &accountingServiceClient{cc}
}

func (c *accountingServiceClient) ShowCurrentBalance(ctx context.Context, in *ShowCurrentBalanceRequest, opts ...grpc.CallOption) (*ShowCurrentBalanceResponse, error) {
	out := new(ShowCurrentBalanceResponse)
	err := c.cc.Invoke(ctx, "/accounting.v1.AccountingService/ShowCurrentBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) ShowTransactionLog(ctx context.Context, in *ShowTransactionLogRequest, opts ...grpc.CallOption) (*ShowTransactionLogResponse, error) {
	out := new(ShowTransactionLogResponse)
	err := c.cc.Invoke(ctx, "/accounting.v1.AccountingService/ShowTransactionLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountingServiceServer is the server API for AccountingService service.
// All implementations must embed UnimplementedAccountingServiceServer
// for forward compatibility
type AccountingServiceServer interface {
	ShowCurrentBalance(context.Context, *ShowCurrentBalanceRequest) (*ShowCurrentBalanceResponse, error)
	ShowTransactionLog(context.Context, *ShowTransactionLogRequest) (*ShowTransactionLogResponse, error)
	mustEmbedUnimplementedAccountingServiceServer()
}

// UnimplementedAccountingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountingServiceServer struct {
}

func (UnimplementedAccountingServiceServer) ShowCurrentBalance(context.Context, *ShowCurrentBalanceRequest) (*ShowCurrentBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCurrentBalance not implemented")
}
func (UnimplementedAccountingServiceServer) ShowTransactionLog(context.Context, *ShowTransactionLogRequest) (*ShowTransactionLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowTransactionLog not implemented")
}
func (UnimplementedAccountingServiceServer) mustEmbedUnimplementedAccountingServiceServer() {}

// UnsafeAccountingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountingServiceServer will
// result in compilation errors.
type UnsafeAccountingServiceServer interface {
	mustEmbedUnimplementedAccountingServiceServer()
}

func RegisterAccountingServiceServer(s grpc.ServiceRegistrar, srv AccountingServiceServer) {
	s.RegisterService(&AccountingService_ServiceDesc, srv)
}

func _AccountingService_ShowCurrentBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowCurrentBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).ShowCurrentBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting.v1.AccountingService/ShowCurrentBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).ShowCurrentBalance(ctx, req.(*ShowCurrentBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_ShowTransactionLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowTransactionLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).ShowTransactionLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting.v1.AccountingService/ShowTransactionLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).ShowTransactionLog(ctx, req.(*ShowTransactionLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountingService_ServiceDesc is the grpc.ServiceDesc for AccountingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accounting.v1.AccountingService",
	HandlerType: (*AccountingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowCurrentBalance",
			Handler:    _AccountingService_ShowCurrentBalance_Handler,
		},
		{
			MethodName: "ShowTransactionLog",
			Handler:    _AccountingService_ShowTransactionLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounting/v1/accounting.proto",
}
