// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tasktrackerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskTrackerServiceClient is the client API for TaskTrackerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskTrackerServiceClient interface {
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	TaskComplete(ctx context.Context, in *TaskCompleteRequest, opts ...grpc.CallOption) (*TaskCompleteResponse, error)
	RandomReassignOpenedTasks(ctx context.Context, in *RandomReassignOpenedTasksRequest, opts ...grpc.CallOption) (*RandomReassignOpenedTasksResponse, error)
	GetListOpenedTasksForMe(ctx context.Context, in *GetListOpenedTasksForMeRequest, opts ...grpc.CallOption) (*GetListOpenedTasksForMeResponse, error)
}

type taskTrackerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskTrackerServiceClient(cc grpc.ClientConnInterface) TaskTrackerServiceClient {
	return &taskTrackerServiceClient{cc}
}

func (c *taskTrackerServiceClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, "/tasktracker.v1.TaskTrackerService/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskTrackerServiceClient) TaskComplete(ctx context.Context, in *TaskCompleteRequest, opts ...grpc.CallOption) (*TaskCompleteResponse, error) {
	out := new(TaskCompleteResponse)
	err := c.cc.Invoke(ctx, "/tasktracker.v1.TaskTrackerService/TaskComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskTrackerServiceClient) RandomReassignOpenedTasks(ctx context.Context, in *RandomReassignOpenedTasksRequest, opts ...grpc.CallOption) (*RandomReassignOpenedTasksResponse, error) {
	out := new(RandomReassignOpenedTasksResponse)
	err := c.cc.Invoke(ctx, "/tasktracker.v1.TaskTrackerService/RandomReassignOpenedTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskTrackerServiceClient) GetListOpenedTasksForMe(ctx context.Context, in *GetListOpenedTasksForMeRequest, opts ...grpc.CallOption) (*GetListOpenedTasksForMeResponse, error) {
	out := new(GetListOpenedTasksForMeResponse)
	err := c.cc.Invoke(ctx, "/tasktracker.v1.TaskTrackerService/GetListOpenedTasksForMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskTrackerServiceServer is the server API for TaskTrackerService service.
// All implementations must embed UnimplementedTaskTrackerServiceServer
// for forward compatibility
type TaskTrackerServiceServer interface {
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	TaskComplete(context.Context, *TaskCompleteRequest) (*TaskCompleteResponse, error)
	RandomReassignOpenedTasks(context.Context, *RandomReassignOpenedTasksRequest) (*RandomReassignOpenedTasksResponse, error)
	GetListOpenedTasksForMe(context.Context, *GetListOpenedTasksForMeRequest) (*GetListOpenedTasksForMeResponse, error)
	mustEmbedUnimplementedTaskTrackerServiceServer()
}

// UnimplementedTaskTrackerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskTrackerServiceServer struct {
}

func (UnimplementedTaskTrackerServiceServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTaskTrackerServiceServer) TaskComplete(context.Context, *TaskCompleteRequest) (*TaskCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskComplete not implemented")
}
func (UnimplementedTaskTrackerServiceServer) RandomReassignOpenedTasks(context.Context, *RandomReassignOpenedTasksRequest) (*RandomReassignOpenedTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RandomReassignOpenedTasks not implemented")
}
func (UnimplementedTaskTrackerServiceServer) GetListOpenedTasksForMe(context.Context, *GetListOpenedTasksForMeRequest) (*GetListOpenedTasksForMeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListOpenedTasksForMe not implemented")
}
func (UnimplementedTaskTrackerServiceServer) mustEmbedUnimplementedTaskTrackerServiceServer() {}

// UnsafeTaskTrackerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskTrackerServiceServer will
// result in compilation errors.
type UnsafeTaskTrackerServiceServer interface {
	mustEmbedUnimplementedTaskTrackerServiceServer()
}

func RegisterTaskTrackerServiceServer(s grpc.ServiceRegistrar, srv TaskTrackerServiceServer) {
	s.RegisterService(&TaskTrackerService_ServiceDesc, srv)
}

func _TaskTrackerService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTrackerServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasktracker.v1.TaskTrackerService/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTrackerServiceServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskTrackerService_TaskComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTrackerServiceServer).TaskComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasktracker.v1.TaskTrackerService/TaskComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTrackerServiceServer).TaskComplete(ctx, req.(*TaskCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskTrackerService_RandomReassignOpenedTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomReassignOpenedTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTrackerServiceServer).RandomReassignOpenedTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasktracker.v1.TaskTrackerService/RandomReassignOpenedTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTrackerServiceServer).RandomReassignOpenedTasks(ctx, req.(*RandomReassignOpenedTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskTrackerService_GetListOpenedTasksForMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListOpenedTasksForMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTrackerServiceServer).GetListOpenedTasksForMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasktracker.v1.TaskTrackerService/GetListOpenedTasksForMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTrackerServiceServer).GetListOpenedTasksForMe(ctx, req.(*GetListOpenedTasksForMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskTrackerService_ServiceDesc is the grpc.ServiceDesc for TaskTrackerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskTrackerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tasktracker.v1.TaskTrackerService",
	HandlerType: (*TaskTrackerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _TaskTrackerService_CreateTask_Handler,
		},
		{
			MethodName: "TaskComplete",
			Handler:    _TaskTrackerService_TaskComplete_Handler,
		},
		{
			MethodName: "RandomReassignOpenedTasks",
			Handler:    _TaskTrackerService_RandomReassignOpenedTasks_Handler,
		},
		{
			MethodName: "GetListOpenedTasksForMe",
			Handler:    _TaskTrackerService_GetListOpenedTasksForMe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tasktracker/v1/tasktracker.proto",
}
